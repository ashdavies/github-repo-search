openapi: 3.0.1
info:
  title: Playground Service
  description: Playground Service definition hosted by Cloud Endpoints with a Cloud Run backend
  version: 1.0.0
  x-version-name: ${version_name}
servers:
  - url: ${cloud_run_hostname}
security:
  - ApiKeyAuth: []
paths:
  /events:
    get:
      tags:
        - events
      summary: Return events by start date
      operationId: getEvents
      parameters:
        - name: startAt
          in: query
          description: The start date to start this query at.
          schema:
            type: string
            format: date
        - name: orderBy
          in: query
          description: The field to sort by.
          schema:
            type: string
        - name: limit
          in: query
          description: The maximum number of items to return.
          schema:
            type: integer
            format: int32
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Event'
  /events:aggregate:
    post:
      tags:
        - events
      summary: Aggregate events from data sources
      operationId: aggregateEvents
      responses:
        200:
          description: OK
          content: {}
  /firebase/auth:
    post:
      tags:
        - firebase
      summary: Signs in or signs up a user
      description: |
        Signs in or signs up a user by exchanging a custom Auth token for the given UID. Upon a  successful sign-in or sign-up, a new Identity Platform ID token and refresh token are issued for the user.
      operationId: signIn
      requestBody:
        content:
          application/json:
            schema:
              required:
                - uid
              type: object
              properties:
                uid:
                  type: string
                  description: |
                    The UID to store in the token. This identifies the user to other Firebase services (Realtime Database, Firebase Auth, etc.). Should be less than 128 characters.
                  example: jane.smith@example.com
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResult'
      x-codegen-request-body-name: body
  /firebase/token:
    post:
      tags:
        - firebase
      summary: Creates a new App Check token
      operationId: createToken
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FirebaseApp'
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppCheckToken'
      x-codegen-request-body-name: body
  /firebase/token:verify:
    put:
      tags:
        - firebase
      summary: Verifies an App Check token
      description: |
        Verifies a Firebase App Check token (JWT). If the token is valid, the promise is fulfilled with the token's decoded claims; otherwise, the promise is rejected.
      operationId: verifyToken
      parameters:
        - name: X-Firebase-AppCheck
          in: header
          description: The App Check token to verify
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DecodedToken'
        400:
          description: Request is missing app check token header
          content: {}
  /hello:
    get:
      tags:
        - hello
      summary: Greet the user
      operationId: helloWorld
      responses:
        200:
          description: OK
          content: {}
  /openapi/documentation.yml:
    get:
      tags:
        - openapi
      summary: OpenAPI Documentation
      operationId: openApiDocumentation
      responses:
        200:
          description: OK
          content: {}
components:
  schemas:
    AppCheckToken:
      required:
        - token
        - ttlMillis
      type: object
      properties:
        ttlMillis:
          type: integer
          description: The time-to-live duration of the token in milliseconds
          format: int64
        token:
          type: string
          description: The Firebase App Check token
    AuthResult:
      type: object
      properties:
        idToken:
          type: string
          description: A Firebase Auth ID token generated from the provided custom
            token.
        refreshToken:
          type: string
          description: A Firebase Auth refresh token generated from the provided custom
            token.
        expiresIn:
          type: integer
          description: The number of seconds in which the ID token expires.
          format: int64
          example: 3600
    DecodedToken:
      required:
        - appId
        - audience
        - expiresAt
        - issuedAt
        - issuer
        - subject
      type: object
      properties:
        audience:
          type: array
          description: |
            The audience for which this token is intended. This value is a JSON array of two strings, the first is the project number of your Firebase project, and the second is the project ID of the same project.
          items:
            type: string
        expiresAt:
          type: integer
          description: |
            The App Check token's expiration time, in seconds since the Unix epoch. That is, the time at which this App Check token expires and should no longer be considered valid.
          format: int64
          example: 1672497116
        issuedAt:
          type: integer
          description: |
            The App Check token's issued-at time, in seconds since the Unix epoch. That is, the time at which this App Check token was issued and should start to be considered valid.
          format: int64
          example: 1672493516
        subject:
          type: string
          description: |
            The Firebase App ID corresponding to the app the token belonged to. As a convenience, this value is copied over to the | app_id property.
          example: 1:1234567890:android:321abc456def7890
        issuer:
          type: string
          description: |
            The issuer identifier for the issuer of the response. This value is a URL with the format https://firebaseappcheck.googleapis.com/<PROJECT_NUMBER>, where <PROJECT_NUMBER> is the same project number specified in the | aud property.
          example: https://firebaseappcheck.googleapis.com/1234567890
        appId:
          type: string
          description: |
            The App ID corresponding to the App the App Check token belonged to. This value is not actually one of the JWT token claims. It is added as a convenience, and is set as the value of the | sub property.
          example: 1:1234567890:android:321abc456def7890
    Event:
      required:
        - dateEnd
        - dateStart
        - id
        - location
        - name
        - website
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        website:
          type: string
        location:
          type: string
        status:
          type: string
        online:
          type: boolean
        dateStart:
          type: string
          format: date
        dateEnd:
          type: string
          format: date
        cfpStart:
          type: string
          format: date
        cfpEnd:
          type: string
          format: date
        cfpSite:
          type: string
          format: date
    FirebaseApp:
      required:
        - appId
      type: object
      properties:
        appId:
          type: string
          description: The app ID to use as the JWT app_id
          example: 1:1234567890:android:321abc456def7890
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      name: X-API-Key
      in: header
x-google-backend:
  address: ${backend_service_name}
  protocol: h2
